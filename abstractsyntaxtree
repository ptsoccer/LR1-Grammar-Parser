{
class BinaryTree(object):
	@staticmethod
	def mkleaf(val):
		leaf = BinaryTree()
		leaf.val = val
		leaf.left = None
		leaf.right = None
		
		return leaf
	
	@staticmethod
	def mknod(val, left, right):
		leaf = BinaryTree()
		leaf.val = val
		leaf.left = left
		leaf.right = right
		
		return leaf
	
	def print_postfix(self, pretext = ""):
		print("-+= " + str(self.val))
		pretext_inter = pretext + " |"
		pretext_final = pretext + "  "

		if self.left is not None:
			print(pretext_inter, end="")
			self.left.print_postfix(pretext_inter)
			
			print(pretext + " \\", end="")
			self.right.print_postfix(pretext_final)
}
S' S $ 			{ val[0].print_postfix() }
S E ; 			{ ret = val[0] }
E E + T 		{ ret = BinaryTree.mknod('+', val[0], val[2]) }
E E - T 		{ ret = BinaryTree.mknod('-', val[0], val[2]) }
E T 			{ ret = val[0] }
T T * F 		{ ret = BinaryTree.mknod('*', val[0], val[2]) }
T T / F 		{ ret = BinaryTree.mknod('/', val[0], val[2]) }
T F 			{ ret = val[0] }
F ( E ) 		{ ret = val[1] }
F NUM 			{ ret = BinaryTree.mkleaf(val[0]) }
NUM NUM DIGIT 	{ ret = val[0] * 10 + val[1] }
NUM DIGIT 		{ ret = val[0] }
DIGIT 0 		{ ret = 0 }
DIGIT 1 		{ ret = 1 }
DIGIT 2 		{ ret = 2 }
DIGIT 3 		{ ret = 3 }
DIGIT 4 		{ ret = 4 }
DIGIT 5 		{ ret = 5 }
DIGIT 6 		{ ret = 6 }
DIGIT 7 		{ ret = 7 }
DIGIT 8 		{ ret = 8 }
DIGIT 9 		{ ret = 9 }